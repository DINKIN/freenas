#!/usr/local/bin/python2.7
#+
# Copyright 2014 iXsystems, Inc.
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#####################################################################

from __future__ import print_function
import sys
import argparse
import json
import datastore
from fnutils import exclude


DEFAULT_CONFIGFILE = '/usr/local/etc/middleware.conf'
ds = None


def init_datastore(filename):
    global ds

    try:
        f = open(filename)
        conf = json.load(f)
        f.close()
    except IOError, err:
        print("Cannot read config file: {0}".format(str(err)))
        sys.exit(1)
    except ValueError, err:
        print("Cannot read config file: {0}".format(str(err)))
        sys.exit(1)

    if 'datastore' not in conf:
        print("Cannot initialize datastore: configuration not found")
        sys.exit(1)

    try:
        ds = datastore.get_datastore(conf['datastore']['driver'], conf['datastore']['dsn'])
    except datastore.DatastoreException, err:
        print("Cannot initialize datastore: {0}".format(str(err)), file=sys.stderr)
        sys.exit(1)


def dump_collection(ds, name):
    metadata = {
        'name': name,
        'pkey-type': ds.collection_get_pkey_type(name),
        'last-id': ds.collection_get_max_id(name),
        'attributes': ds.collection_get_attrs(name)
    }

    return {
        'metadata': metadata,
        'data': {x['id']: exclude(x, 'id') for x in ds.query(name)}
    }


def main():
    global ds
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', metavar='CONFIG', default=DEFAULT_CONFIGFILE, help='Config file name')
    parser.add_argument('-t', metavar='TYPE', default='', help='Collection types to dump')
    parser.add_argument('-x', metavar='NOMETA', help='Don\'t include metadata')
    parser.add_argument('-o', metavar='OUTPUT', help='Output file name')
    parser.add_argument('collections', metavar='COLLECTION', nargs='*', default='all', help='Collections to dump or "all"')

    args = parser.parse_args()
    init_datastore(args.c)

    types = args.t.split(',')
    result = []

    if 'all' in args.collections:
        args.collections = ds.collection_list()

    for cname in args.collections:
        attrs = ds.collection_get_attrs(cname)
        if 'type' in attrs.keys() and attrs['type'] not in types:
            continue

        result.append(dump_collection(ds, cname))

    try:
        fd = open(args.o, 'w') if args.o else sys.stdout
        json.dump(result, fd, indent=4)
    except IOError, e:
        print("Could not open output file: {0}".format(str(e)), file=sys.stderr)
        sys.exit(1)

if __name__ == '__main__':
    main()